/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/

export const validArrayEncoderData: Array<{
	type: string;
	values: Array<unknown>;
	result: string;
	dynamic: boolean;
}> = [
	{
		type: 'uint[]',
		values: [1, 3],
		dynamic: true,
		result: '0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003',
	},
	{
		type: 'uint[2]',
		values: [1, 3],
		dynamic: false,
		result: '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003',
	},
	{
		type: 'string[2]',
		values: ['hello', 'web3'],
		dynamic: true,
		result: '0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047765623300000000000000000000000000000000000000000000000000000000',
	},
	{
		type: 'string[]',
		values: ['hello', 'web3'],
		dynamic: true,
		result: '0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047765623300000000000000000000000000000000000000000000000000000000',
	},
];

export const invalidArrayEncoderData: Array<{
	type: string;
	values: unknown;
}> = [
	{
		type: 'uint[]',
		values: 'dsfdf',
	},
	{
		type: 'uint[3]',
		values: [1, 2],
	},
];

export const validArrayDecoderData: Array<{
	type: string;
	bytes: string;
	result: unknown;
	remaining: string;
}> = [
	{
		type: 'uint[]',
		result: [BigInt(1), BigInt(3)],
		bytes: '0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003',
		remaining: '0x',
	},
	{
		type: 'uint[2]',
		bytes: '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003',
		result: [BigInt(1), BigInt(3)],
		remaining: '0x',
	},
	{
		type: 'string[2]',
		result: ['hello', 'web3'],
		bytes: '0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047765623300000000000000000000000000000000000000000000000000000000',
		remaining: '0x',
	},
	{
		type: 'string[]',
		result: ['hello', 'web3'],
		bytes: '0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047765623300000000000000000000000000000000000000000000000000000000',
		remaining: '0x',
	},
];

export const invalidArrayDecoderData: Array<{
	type: string;
	bytes: string;
}> = [
	{
		type: 'uint[]',
		bytes: '0x',
	},
];
